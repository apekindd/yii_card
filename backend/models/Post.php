<?php

namespace backend\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;

/**
 * This is the model class for table "post".
 *
 * @property integer $id
 * @property string $title
 * @property string $code
 * @property string $preview_text
 * @property string $detail_text
 * @property string $images
 * @property string $date_create
 * @property string $date_update
 * @property integer $active
 * @property integer $views
 * @property integer $user_id
 * @property string $seo_description
 *
 * @property User $user
 */
class Post extends Img
{

    public $preview_picture;
    public $detail_picture;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'post';
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['preview_picture','detail_picture'], 'file', 'extensions' => 'png, jpg'],

            [['title', 'code', 'user_id'], 'required'],
            [['detail_text'], 'string'],
            [['active', 'publish', 'views', 'user_id'], 'integer'],
            [['title', 'code', 'preview_text', 'seo_description'], 'string', 'max' => 255],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'code' => 'Символьный код',
            'preview_text' => 'Текст превью',
            'detail_text' => 'Детальный текст',
            'date_create' => 'Date Create',
            'date_update' => 'Date Update',
            'active' => 'Активность',
            'publish' => 'Опубликовано',
            'views' => 'Просмотры',
            'user_id' => 'Автор',
            'seo_description' => 'Сео-описание',
            'preview_picture' => 'Картинка превью',
            'detail_picture' => 'Детальная картинка',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function beforeSave($insert)
    {
        if($this->images==null){
            $this->images = [
                //"imageGallery"=>[],
                "preview_picture"=>"",
                "detail_picture"=>""
            ];
            $this->images = json_encode($this->images);
            $this->images = json_decode($this->images);
        }


        /*if($this->imageGalleryMobile){
            foreach ($this->imageGalleryMobile as $file) {
                $name =  $this->generateName() . '.' . $file->extension;
                $file->saveAs(Yii::getAlias("@frontend").'/web/images/' .$name);
                $this->images->imageGalleryMobile[] = $name;
            }
        }*/
        
        if(is_object($this->preview_picture)){
            $name =  $this->generateName() . '.' . $this->preview_picture->extension;
            $this->preview_picture->saveAs(Yii::getAlias("@frontend").'/web/images/' .$name);
            $this->images->preview_picture = $name;
        }
        if(is_object($this->detail_picture)){
            $name =  $this->generateName() . '.' . $this->detail_picture->extension;
            $this->detail_picture->saveAs(Yii::getAlias("@frontend").'/web/images/' .$name);
            $this->images->detail_picture = $name;
        }
        //echo '<pre>';print_r($this); echo '</pre>';die();

        $this->images = json_encode($this->images);


        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->images = json_decode($this->images);

        parent::afterFind(); // TODO: Change the autogenerated stub
    }
}
